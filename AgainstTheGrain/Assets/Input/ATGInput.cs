//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Input/ATGInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ATGInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ATGInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ATGInput"",
    ""maps"": [
        {
            ""name"": ""GameMappings"",
            ""id"": ""6cf17cd1-9e7c-4be4-b5de-decb659fa817"",
            ""actions"": [
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""2a15e971-97c5-40cd-b3af-bf5d62a8d207"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Deselect"",
                    ""type"": ""Button"",
                    ""id"": ""359fcf04-4542-4f0a-bb5c-c9bac9650287"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Up"",
                    ""type"": ""Button"",
                    ""id"": ""d326ed4f-a63e-40e5-9320-747d29527289"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""41fcdc01-2303-4031-9c88-4f46f3e3d622"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""72ecdabc-67ff-452a-b3c2-90e52b79371b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""EndTurn"",
                    ""type"": ""Button"",
                    ""id"": ""d476a1dd-4254-43d7-976c-d782b00cfe36"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b7a8d99e-dc67-42ee-9271-26ec1aedcae2"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9e07124b-fd4b-4726-8140-6bbfb5746d50"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""242761e0-0928-40c9-b3bf-bed90a26d081"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""373f0ca7-9f1a-4971-90ab-31cf567b2a89"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Deselect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""08d4b811-e868-4cf5-99df-96d56579b9a4"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Deselect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""19d5ee07-2f45-4f6a-a215-fe2d21c76511"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dd347b26-138f-4b00-9dd7-fbc420492894"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""39af6ce7-c8f4-4d53-9c54-708f8ddc9315"",
                    ""path"": ""<Mouse>/forwardButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b0955306-4dc6-4743-93d4-82f6d8982a7e"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fcd2bbb3-8e18-4802-a10d-2b62020bcadb"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""61335b96-7031-45d1-887f-deddb7927581"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aca3e096-60b4-425f-a1cb-71ffec981426"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1a7291e3-5201-4123-a46a-7727b68b17c6"",
                    ""path"": ""<Mouse>/backButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""70d32d2d-ccc0-4c36-86a2-553942be411a"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""00cbb1ff-e7d7-42a0-8b93-915064cfbfcb"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""99f14890-4571-4b18-aaf2-2cd109494667"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""423e1dcc-f771-4830-ac44-d31177bbc4ac"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a48c0206-f706-4bce-974d-8cdd231f2f77"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ed10220a-5207-4bb2-b1c0-1fb97427282e"",
                    ""path"": ""<Gamepad>/leftStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EndTurn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GameMappings
        m_GameMappings = asset.FindActionMap("GameMappings", throwIfNotFound: true);
        m_GameMappings_Select = m_GameMappings.FindAction("Select", throwIfNotFound: true);
        m_GameMappings_Deselect = m_GameMappings.FindAction("Deselect", throwIfNotFound: true);
        m_GameMappings_Up = m_GameMappings.FindAction("Up", throwIfNotFound: true);
        m_GameMappings_Down = m_GameMappings.FindAction("Down", throwIfNotFound: true);
        m_GameMappings_Pause = m_GameMappings.FindAction("Pause", throwIfNotFound: true);
        m_GameMappings_EndTurn = m_GameMappings.FindAction("EndTurn", throwIfNotFound: true);
    }

    ~@ATGInput()
    {
        UnityEngine.Debug.Assert(!m_GameMappings.enabled, "This will cause a leak and performance issues, ATGInput.GameMappings.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GameMappings
    private readonly InputActionMap m_GameMappings;
    private List<IGameMappingsActions> m_GameMappingsActionsCallbackInterfaces = new List<IGameMappingsActions>();
    private readonly InputAction m_GameMappings_Select;
    private readonly InputAction m_GameMappings_Deselect;
    private readonly InputAction m_GameMappings_Up;
    private readonly InputAction m_GameMappings_Down;
    private readonly InputAction m_GameMappings_Pause;
    private readonly InputAction m_GameMappings_EndTurn;
    public struct GameMappingsActions
    {
        private @ATGInput m_Wrapper;
        public GameMappingsActions(@ATGInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Select => m_Wrapper.m_GameMappings_Select;
        public InputAction @Deselect => m_Wrapper.m_GameMappings_Deselect;
        public InputAction @Up => m_Wrapper.m_GameMappings_Up;
        public InputAction @Down => m_Wrapper.m_GameMappings_Down;
        public InputAction @Pause => m_Wrapper.m_GameMappings_Pause;
        public InputAction @EndTurn => m_Wrapper.m_GameMappings_EndTurn;
        public InputActionMap Get() { return m_Wrapper.m_GameMappings; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameMappingsActions set) { return set.Get(); }
        public void AddCallbacks(IGameMappingsActions instance)
        {
            if (instance == null || m_Wrapper.m_GameMappingsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameMappingsActionsCallbackInterfaces.Add(instance);
            @Select.started += instance.OnSelect;
            @Select.performed += instance.OnSelect;
            @Select.canceled += instance.OnSelect;
            @Deselect.started += instance.OnDeselect;
            @Deselect.performed += instance.OnDeselect;
            @Deselect.canceled += instance.OnDeselect;
            @Up.started += instance.OnUp;
            @Up.performed += instance.OnUp;
            @Up.canceled += instance.OnUp;
            @Down.started += instance.OnDown;
            @Down.performed += instance.OnDown;
            @Down.canceled += instance.OnDown;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
            @EndTurn.started += instance.OnEndTurn;
            @EndTurn.performed += instance.OnEndTurn;
            @EndTurn.canceled += instance.OnEndTurn;
        }

        private void UnregisterCallbacks(IGameMappingsActions instance)
        {
            @Select.started -= instance.OnSelect;
            @Select.performed -= instance.OnSelect;
            @Select.canceled -= instance.OnSelect;
            @Deselect.started -= instance.OnDeselect;
            @Deselect.performed -= instance.OnDeselect;
            @Deselect.canceled -= instance.OnDeselect;
            @Up.started -= instance.OnUp;
            @Up.performed -= instance.OnUp;
            @Up.canceled -= instance.OnUp;
            @Down.started -= instance.OnDown;
            @Down.performed -= instance.OnDown;
            @Down.canceled -= instance.OnDown;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
            @EndTurn.started -= instance.OnEndTurn;
            @EndTurn.performed -= instance.OnEndTurn;
            @EndTurn.canceled -= instance.OnEndTurn;
        }

        public void RemoveCallbacks(IGameMappingsActions instance)
        {
            if (m_Wrapper.m_GameMappingsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameMappingsActions instance)
        {
            foreach (var item in m_Wrapper.m_GameMappingsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameMappingsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameMappingsActions @GameMappings => new GameMappingsActions(this);
    public interface IGameMappingsActions
    {
        void OnSelect(InputAction.CallbackContext context);
        void OnDeselect(InputAction.CallbackContext context);
        void OnUp(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnEndTurn(InputAction.CallbackContext context);
    }
}
